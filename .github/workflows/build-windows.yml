name: Windows CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-windows:
    name: Test on Windows
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable-x86_64-pc-windows-msvc
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          windows-cargo-
          windows-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --no-default-features -- -D warnings

    - name: Build (default features)
      run: cargo build --no-default-features

    - name: Build (with CLI UI)
      run: cargo build --features cli-ui

    - name: Run tests (default features)
      run: cargo test --no-default-features --lib
      continue-on-error: true

    - name: Run tests (with CLI UI)
      run: cargo test --features cli-ui --lib
      continue-on-error: true

    - name: Build release binary
      run: cargo build --release --no-default-features

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: codl3-zksync-windows
        path: target/release/codl3-zksync.exe
        if-no-files-found: warn

  windows-cross-compile:
    name: Cross-compile for Windows (from Linux)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-gnu

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64

    - name: Build for Windows
      run: cargo build --release --no-default-features --target x86_64-pc-windows-gnu

    - name: Upload Windows cross-compiled binary
      uses: actions/upload-artifact@v4
      with:
        name: codl3-zksync-windows-cross
        path: target/x86_64-pc-windows-gnu/release/codl3-zksync.exe
        if-no-files-found: warn
